#version 460
#extension GL_EXT_mesh_shader : require
#extension GL_ARB_shader_draw_parameters : require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_GOOGLE_include_directive: require
#extension GL_KHR_shader_subgroup_ballot: require

layout(local_size_x=32) in;

struct crude_meshlet
{
  vec3                                                     center;
  float                                                    radius;
  int8_t                                                   cone_axis[ 3 ];
  int8_t                                                   cone_cutoff;
  uint                                                     vertices_offset;
  uint                                                     triangles_offset;
  uint8_t                                                  vertices_count;
  uint8_t                                                  triangles_count;
  uint                                                     mesh_index;
};

struct crude_vertex
{
  vec3                                                     position;
  float                                                    padding1;
  uint8_t                                                  nx, ny, nz, nw;
  uint8_t                                                  tx, ty, tz, tw;
  float16_t                                                tu, tv;
  float                                                    padding2;
};

struct crude_mesh_draw
{
  mat4                                                     model_to_world;

  uvec4                                                    textures;
  vec4                                                     emissive;
  vec4                                                     albedo_color_factor;
  vec4                                                     metallic_roughness_occlusion_factor;

  uint                                                     flags;
  float                                                    alpha_cutoff;
  uint                                                     vertices_offset;
  uint                                                     mesh_index;

  uint                                                     meshletes_offset;
  uint                                                     meshletes_count;
  uint                                                     meshletes_index_count;
  uint                                                     padding1;
};

layout(set=1, binding=0, row_major, std140) uniform SceneConstant
{
  vec3                                                     camera_position;
  float                                                    padding1;
  vec4                                                     camera_frustum_planes[ 6 ];
  mat4                                                     world_to_view;
  mat4                                                     view_to_clip;
  mat4                                                     clip_to_view;
  mat4                                                     view_to_world;
};

layout(set=1, binding=1) readonly buffer Meshlets
{
  crude_meshlet                                            meshlets[];
};

layout(set=1, binding=2) readonly buffer Vertices
{
  crude_vertex                                             vertices[];
};

layout(set=1, binding=3) readonly buffer TrianglesIndices
{
  uint8_t                                                  triangles_indices[];
};

layout(set=1, binding=4) readonly buffer VerticesIndices
{
  uint                                                     vertices_indices[];
};

layout(set=1, binding=5, row_major, std430) readonly buffer MeshDraws
{
  crude_mesh_draw                                          mesh_draws[];
};

taskPayloadSharedEXT struct
{
  uint                                                     meshlet_indices[ 128 ];
  uint                                                     mesh_draw_indices[ 128 ]; /* Validation says that I shouldn't use gl_DrawIDARB in mesh shader, don't know why, but wouldn't argue with him */
} shared_data;

bool cone_cull(vec3 center, float radius, vec3 cone_axis, float cone_cutoff, vec3 camera_pos )
{
  return dot( center - camera_pos, cone_axis ) >= cone_cutoff * length( center - camera_pos ) + radius;
}

void main()
{
  uint thread_index = gl_LocalInvocationID.x;
  uint group_index = gl_WorkGroupID.x;
  uint meshlet_index = mesh_draws[ gl_DrawIDARB ].meshletes_offset + group_index * gl_WorkGroupSize.x + thread_index;

  if ( meshlet_index >= mesh_draws[ gl_DrawIDARB ].meshletes_offset + mesh_draws[ gl_DrawIDARB ].meshletes_count )
  {
    return;
  }

  mat4 model_to_world = mesh_draws[ gl_DrawIDARB ].model_to_world;
  vec4 world_center = vec4( meshlets[ meshlet_index ].center, 1 ) * model_to_world;
  float scale = length( model_to_world[ 0 ] );
  float radius = meshlets[ meshlet_index ].radius * scale * 1.1;
  vec3 cone_axis = vec3(
    int( meshlets[ meshlet_index ].cone_axis[ 0 ] ) / 127.0,
    int( meshlets[ meshlet_index ].cone_axis[ 1 ]) / 127.0,
    int( meshlets[ meshlet_index ].cone_axis[ 2 ]) / 127.0 ) * mat3( model_to_world );
  float cone_cutoff = int( meshlets[ meshlet_index ].cone_cutoff ) / 127.0;
  
  bool accept = false;

  accept = !cone_cull( world_center.xyz, radius, cone_axis, cone_cutoff, camera_position );
  
  vec4 view_center = world_center * world_to_view;

  bool frustum_visible = true;
  for ( uint i = 0; i < 6; ++i )
  {
    frustum_visible = frustum_visible && ( dot( camera_frustum_planes[ i ], view_center ) > -radius );
  }
  accept = accept && frustum_visible;
  
  uvec4 ballot = subgroupBallot( accept );
  
  uint previous_visible_meshlet_index = subgroupBallotExclusiveBitCount( ballot );
  if ( accept )
  {
    shared_data.meshlet_indices[ previous_visible_meshlet_index ] = meshlet_index;
    shared_data.mesh_draw_indices[ previous_visible_meshlet_index ] = gl_DrawIDARB;
  }
  
  uint visible_meslets_count = subgroupBallotBitCount( ballot );
  if ( thread_index == 0 )
  {
    EmitMeshTasksEXT( visible_meslets_count, 1, 1 );
  }
}
#version 450
#extension GL_EXT_mesh_shader : require
#extension GL_ARB_shader_draw_parameters : require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_GOOGLE_include_directive: require

#define CRUDE_GLOBAL_SET 0
#define CRUDE_MATERIAL_SET 1

layout(local_size_x=128) in;


struct Meshlet
{
  vec3                                                     center;
  float                                                    radius;
  int8_t                                                   cone_axis[ 3 ];
  int8_t                                                   cone_cutoff;
  uint                                                     vertices_offset;
  uint                                                     triangles_offset;
  uint8_t                                                  vertices_count;
  uint8_t                                                  triangles_count;
  uint                                                     mesh_index;
};

struct Vertex
{
  vec3                                                     position;
  float                                                    padding1;
  uint8_t                                                  nx, ny, nz, nw;
  uint8_t                                                  tx, ty, tz, tw;
  float16_t                                                tu, tv;
  float                                                    padding2;
};

struct crude_mesh_draw
{
  mat4                                                     model_to_world;

  uvec4                                                    textures;
  vec4                                                     emissive;
  vec4                                                     albedo_color_factor;
  vec4                                                     metallic_roughness_occlusion_factor;

  uint                                                     flags;
  float                                                    alpha_cutoff;
  uint                                                     vertices_offset;
  uint                                                     mesh_index;

  uint                                                     meshletes_offset;
  uint                                                     meshletes_count;
  uint                                                     meshletes_index_count;
  uint                                                     padding1;
};

layout(set=1, binding=0, row_major, std140) uniform SceneConstant
{
  mat4                                                     world_to_view;
  mat4                                                     view_to_clip;
  mat4                                                     clip_to_view;
  mat4                                                     view_to_world;
};

layout(set=1, binding=1) readonly buffer Meshlets
{
  Meshlet                                                  meshlets[];
};

layout(set=1, binding=2) readonly buffer Vertices
{
  Vertex                                                   vertices[];
};

layout(set=1, binding=3) readonly buffer TrianglesIndices
{
  uint8_t                                                  triangles_indices[];
};

layout(set=1, binding=4) readonly buffer VerticesIndices
{
  uint                                                     vertices_indices[];
};

layout(set=1, binding=5, std430) readonly buffer MeshDraws
{
  crude_mesh_draw                                          mesh_draws[];
};

taskPayloadSharedEXT struct
{
  uint                                                     meshlet_indices[ 128 ];
} shared_data;

void main()
{
  uint thread_index = gl_LocalInvocationID.x;
  uint group_index = gl_WorkGroupID.x;
  uint meshlet_index = mesh_draws[ gl_DrawIDARB ].meshletes_offset + group_index * 128 + thread_index;
  shared_data.meshlet_indices[ thread_index ] = meshlet_index;

  uint local_meslets_count = min( mesh_draws[ gl_DrawIDARB ].meshletes_count - group_index * 128, 128 );
  EmitMeshTasksEXT( local_meslets_count, 1, 1 );
}
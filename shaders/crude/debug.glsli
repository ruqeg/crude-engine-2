
#ifndef CRUDE_DEBUG_GLSLI
#define CRUDE_DEBUG_GLSLI

struct crude_debug_line_vertex
{
  vec3                                                     position;
  uint                                                     color;
};

struct crude_debug_draw_command
{
  uint                                                     vertices_count;
  uint                                                     instances_count;
  uint                                                     first_vertex;
  uint                                                     first_instance;
};

layout(set=CRUDE_MATERIAL_SET, binding=20) readonly buffer CrudeDebugLines
{
  crude_debug_line_vertex                                  debug_line_vertices[];
};

layout(set=CRUDE_MATERIAL_SET, binding=21) readonly buffer CrudeDebugLinesCount
{
  uint                                                     debug_lines_3d_count;
  uint                                                     debug_lines_2d_count;
  uint                                                     frame_index;
  uint                                                     padding1;
};

layout(set=CRUDE_MATERIAL_SET, binding=22) readonly buffer CrudeDebugLineCommands
{
  crude_debug_draw_command                                 debug_draw_commands;
  crude_debug_draw_command                                 debug_draw_commands_2d;
};


uint crude_vec4_to_rgba( vec4 color )
{
  return ( uint( color.r * 255.f ) | ( uint( color.g * 255.f ) << 8 ) | ( uint( color.b * 255.f ) << 16 ) | ( ( uint( color.a * 255.f ) << 24 ) ) );
}

vec4 unpack_color_rgba( uint color ) {
    return vec4( ( color & 0xffu ) / 255.f,
                 ( ( color >> 8u ) & 0xffu ) / 255.f,
                 ( ( color >> 16u ) & 0xffu ) / 255.f,
                 ( ( color >> 24u ) & 0xffu ) / 255.f );
}

vec4 unpack_color_abgr( uint color ) {
    return vec4( ( ( color >> 24u ) & 0xffu ) / 255.f,
                 ( ( color >> 16u ) & 0xffu ) / 255.f,
                 ( ( color >> 8u ) & 0xffu ) / 255.f,
                 ( color & 0xffu ) / 255.f );
}

void crude_debug_draw_line_coloru( vec3 start, vec3 end, uint start_color, uint end_color )
{
  uint offset = atomicAdd( debug_lines_3d_count, 2 );

  debug_line_vertices[ offset ].position = start;
  debug_line_vertices[ offset ].color = start_color;

  debug_line_vertices[ offset + 1 ].position = end;
  debug_line_vertices[ offset + 1 ].color = end_color;
}

void crude_debug_draw_line( vec3 start, vec3 end, vec4 start_color, vec4 end_color )
{
  crude_debug_draw_line_coloru( start, end, crude_vec4_to_rgba( start_color ), crude_vec4_to_rgba( end_color ) );
}

#endif /* CRUDE_DEBUG_GLSLI */